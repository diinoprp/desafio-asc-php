{"version":3,"sources":["PokerCard.js","Hand.js","Board.js","Ranking.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["PokerCard","cardName","this","props","alt","style","width","margin","src","Component","Hand","hand","display","justifyContent","flexWrap","cards","map","card","index","value","suit","key","Poker","state","matchData","fetch","then","res","json","setState","loadHands","suitName","players","Object","entries","length","marginTop","sizeUnit","size","color","loading","player","name","winner","evaluate","hand_name","getCardName","high_card","getSuitName","md","variant","onClick","Ranking","ranking","loadRanking","striped","bordered","hover","responsive","entry","playerName","handName","format","date","matchDate","Menu","bg","Brand","as","Link","to","process","height","className","path","exact","component","Board","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAEqBA,G,uLACT,IACAC,EAAaC,KAAKC,MAAlBF,SACR,OACE,6BACE,yBACEG,IAAKH,EACLI,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAC7BC,IAAG,kBAAaP,EAAb,e,GAR0BQ,cCClBC,E,iLACT,IACAC,EAAST,KAAKC,MAAdQ,KACR,OACE,yBACEN,MAAO,CAAEO,QAAS,OAAQC,eAAgB,SAAUC,SAAU,SAE7DH,GACCA,EAAKI,MAAMC,IAAI,SAACC,EAAMC,GAAP,OACb,kBAAC,EAAD,CAAWjB,SAAQ,UAAKgB,EAAKE,OAAV,OAAkBF,EAAKG,MAAQC,IAAKH,W,GATjCT,a,qFCKba,E,YACnB,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,CAAEC,UAAW,IAFT,E,yEAKN,IAAD,OACVC,MAAM,8CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAI,EAAKE,SAAS,CAAEL,UAAWG,Q,0CAI1CzB,KAAK4B,c,kCAGKV,GACV,IAAIW,EAAW,GACf,OAAQX,GACN,IAAK,IACHW,EAAW,QACX,MACF,IAAK,IACHA,EAAW,QACX,MACF,IAAK,IACHA,EAAW,UACX,MACF,IAAK,IACHA,EAAW,OACX,MACF,QACEA,EAAWX,EAEf,OAAOW,I,kCAGGZ,GACV,IAAIlB,EAEJ,OAAQkB,GACN,IAAK,IACHlB,EAAW,SACX,MACF,IAAK,IACHA,EAAW,SACX,MACF,IAAK,IACHA,EAAW,MACX,MACF,IAAK,IACHA,EAAW,QACX,MACF,QACEA,EAAWkB,EAGf,OAAOlB,I,+BAGC,IAAD,OACCuB,EAActB,KAAKqB,MAAnBC,UACAQ,EAAYR,EAAZQ,QAER,OACE,kBAAC,IAAD,KACwC,IAArCC,OAAOC,QAAQV,GAAWW,OACzB,kBAAC,IAAD,CAAK9B,MAAO,CAAEQ,eAAgB,SAAUuB,UAAW,MACjD,kBAAC,IAAD,CACEC,SAAU,KACVC,KAAM,GACNC,MAAO,MACPC,SAAS,KAIb,oCACGR,GACCA,EAAQhB,IAAI,SAAAyB,GAAM,OAChB,yBAAKpC,MAAO,CAAEE,OAAQ,IAAMc,IAAKoB,EAAOC,MACtC,kBAAC,IAAD,CAAKrC,MAAO,CAAEQ,eAAgB,WAC5B,4BACG4B,EAAOC,MACW,IAAlBD,EAAOE,OAAP,gBAAiC,OAGtC,kBAAC,IAAD,CAAKtC,MAAO,CAAEQ,eAAgB,WAC3B4B,EAAOG,SAASC,UACf,gCAAMJ,EAAOG,SAASC,UAAtB,KAEA,+CACmB,IADnB,UAEM,EAAKC,YACPL,EAAOG,SAASG,UAAU5B,OAH9B,wCAKI,EAAK6B,YAAYP,EAAOG,SAASG,UAAU3B,SAInD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK6B,GAAI,IACNR,EAAO9B,MAAQ,kBAAC,EAAD,CAAMA,KAAM8B,EAAO9B,YAzB/C,IA+BE,kBAAC,IAAD,CAAKN,MAAO,CAAEQ,eAAgB,WAC5B,kBAAC,IAAD,CACEqC,QAAQ,OACR7C,MAAO,CAAEE,OAAQ,IACjB4C,QAAS,kBAAM,EAAKrB,cAHtB,iC,GA5GqBrB,a,kCCAd2C,E,YACnB,WAAYjD,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,CAAE8B,QAAS,IAFP,E,2EAKJ,IAAD,OACZ5B,MAAM,6DACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAI,EAAKE,SAAS,CAAEwB,QAAS1B,EAAI0B,c,0CAI5CnD,KAAKoD,gB,+BAEG,IACAD,EAAYnD,KAAKqB,MAAjB8B,QACR,OACE,kBAAC,IAAD,KACsC,IAAnCpB,OAAOC,QAAQmB,GAASlB,OACvB,kBAAC,IAAD,CAAK9B,MAAO,CAAEQ,eAAgB,SAAUuB,UAAW,MACjD,kBAAC,IAAD,CACEC,SAAU,KACVC,KAAM,GACNC,MAAO,MACPC,SAAS,KAIb,yBAAKnC,MAAO,CAAE+B,UAAW,KACvB,kBAAC,IAAD,CAAOmB,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAACR,QAAQ,QAC/C,+BACE,4BACE,iCACA,oCACA,sCACA,sCAGJ,+BACGG,GACCA,EAAQrC,IAAI,SAAC2C,EAAOzC,GAAR,OACV,wBAAIG,IAAKH,GACP,4BAAKA,EAAQ,GACb,4BAAKyC,EAAMC,YACX,4BAAKD,EAAME,UACX,4BACE,kBAAC,IAAD,CAAQC,OAAO,aAAaC,KAAMJ,EAAMK,wB,GA/C3BvD,a,kDCAhBwD,E,iLAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,GAAG,OAAOhB,QAAQ,QACxB,kBAAC,IAAOiB,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KACzB,yBACElE,IAAI,GACJI,IAAK+D,kCACLjE,MAAM,KACNkE,OAAO,KACPC,UAAU,6BAEX,cAEH,kBAAC,IAAD,CAAKA,UAAU,WACb,kBAAC,IAAIJ,KAAL,CAAUD,GAAIC,IAAMC,GAAI,KAAxB,SAGA,kBAAC,IAAID,KAAL,CAAUD,GAAIC,IAAMC,GAAI,YAAxB,aAKJ,kBAAC,IAAD,CAAOI,KAAM,IAAKC,OAAK,EAACC,UAAWC,IACnC,kBAAC,IAAD,CAAOH,KAAM,WAAYC,OAAK,EAACC,UAAWxB,S,GAzBhB3C,aCJbqE,E,iLAEjB,OACE,oCACE,kBAAC,EAAD,W,GAJyBrE,aCQbsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,KAAK,SAAAiE,GACjCA,EAAaC,iB","file":"static/js/main.2151b15a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class PokerCard extends Component {\r\n  render() {\r\n    const { cardName } = this.props;\r\n    return (\r\n      <div>\r\n        <img\r\n          alt={cardName}\r\n          style={{ width: 100, margin: 15 }}\r\n          src={`./cards/${cardName}.svg`}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PokerCard from \"./PokerCard\";\r\n\r\nexport default class Hand extends Component {\r\n  render() {\r\n    const { hand } = this.props;\r\n    return (\r\n      <div\r\n        style={{ display: \"flex\", justifyContent: \"center\", flexWrap: \"wrap\" }}\r\n      >\r\n        {hand &&\r\n          hand.cards.map((card, index) => (\r\n            <PokerCard cardName={`${card.value}${card.suit}`} key={index} />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Hand from \"./Hand\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nexport default class Poker extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { matchData: {} };\r\n  }\r\n\r\n  loadHands() {\r\n    fetch(`https://desafio-asc-php.000webhostapp.com/`)\r\n      .then(res => res.json())\r\n      .then(res => this.setState({ matchData: res }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadHands();\r\n  }\r\n\r\n  getSuitName(suit) {\r\n    let suitName = \"\";\r\n    switch (suit) {\r\n      case \"O\":\r\n        suitName = \"Ouros\";\r\n        break;\r\n      case \"C\":\r\n        suitName = \"Copas\";\r\n        break;\r\n      case \"E\":\r\n        suitName = \"Espadas\";\r\n        break;\r\n      case \"P\":\r\n        suitName = \"Paus\";\r\n        break;\r\n      default:\r\n        suitName = suit;\r\n    }\r\n    return suitName;\r\n  }\r\n\r\n  getCardName(value) {\r\n    let cardName;\r\n\r\n    switch (value) {\r\n      case \"J\":\r\n        cardName = \"Valete\";\r\n        break;\r\n      case \"Q\":\r\n        cardName = \"Rainha\";\r\n        break;\r\n      case \"K\":\r\n        cardName = \"Rei\";\r\n        break;\r\n      case \"A\":\r\n        cardName = \"√Ås\";\r\n        break;\r\n      default:\r\n        cardName = value;\r\n    }\r\n\r\n    return cardName;\r\n  }\r\n\r\n  render() {\r\n    const { matchData } = this.state;\r\n    const { players } = matchData;\r\n\r\n    return (\r\n      <Container>\r\n        {Object.entries(matchData).length === 0 ? (\r\n          <Row style={{ justifyContent: \"center\", marginTop: 100 }}>\r\n            <ClipLoader\r\n              sizeUnit={\"px\"}\r\n              size={50}\r\n              color={\"red\"}\r\n              loading={true}\r\n            />\r\n          </Row>\r\n        ) : (\r\n          <>\r\n            {players &&\r\n              players.map(player => (\r\n                <div style={{ margin: 50 }} key={player.name}>\r\n                  <Row style={{ justifyContent: \"center\" }}>\r\n                    <h1>\r\n                      {player.name}\r\n                      {player.winner === true ? ` üëë` : null}\r\n                    </h1>\r\n                  </Row>\r\n                  <Row style={{ justifyContent: \"center\" }}>\r\n                    {player.evaluate.hand_name ? (\r\n                      <h1> {player.evaluate.hand_name} </h1>\r\n                    ) : (\r\n                      <h1>\r\n                        Carta mais alta:{\" \"}\r\n                        {`${this.getCardName(\r\n                          player.evaluate.high_card.value\r\n                        )} de\r\n                        ${this.getSuitName(player.evaluate.high_card.suit)}`}\r\n                      </h1>\r\n                    )}\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md={12}>\r\n                      {player.hand && <Hand hand={player.hand} />}\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              ))}\r\n            )\r\n            <Row style={{ justifyContent: \"center\" }}>\r\n              <Button\r\n                variant=\"dark\"\r\n                style={{ margin: 25 }}\r\n                onClick={() => this.loadHands()}\r\n              >\r\n                Jogar novamente ‚≠Ø\r\n              </Button>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Moment from \"react-moment\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nexport default class Ranking extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ranking: {} };\r\n  }\r\n\r\n  loadRanking() {\r\n    fetch(`https://desafio-asc-php.000webhostapp.com/api/ranking.php`)\r\n      .then(res => res.json())\r\n      .then(res => this.setState({ ranking: res.ranking }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadRanking();\r\n  }\r\n  render() {\r\n    const { ranking } = this.state;\r\n    return (\r\n      <Container>\r\n        {Object.entries(ranking).length === 0 ? (\r\n          <Row style={{ justifyContent: \"center\", marginTop: 100 }}>\r\n            <ClipLoader\r\n              sizeUnit={\"px\"}\r\n              size={50}\r\n              color={\"red\"}\r\n              loading={true}\r\n            />\r\n          </Row>\r\n        ) : (\r\n          <div style={{ marginTop: 50 }}>\r\n            <Table striped bordered hover responsive variant=\"dark\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Nome</th>\r\n                  <th>M√£o</th>\r\n                  <th>Data</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {ranking &&\r\n                  ranking.map((entry, index) => (\r\n                    <tr key={index}>\r\n                      <td>{index + 1}</td>\r\n                      <td>{entry.playerName}</td>\r\n                      <td>{entry.handName}</td>\r\n                      <td>\r\n                        <Moment format=\"DD/MM/YYYY\" date={entry.matchDate} />\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Board from \"./Board\";\r\nimport Ranking from \"./Ranking\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nexport default class Menu extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand as={Link} to=\"/\">\r\n            <img\r\n              alt=\"\"\r\n              src={process.env.PUBLIC_URL + \"/poker-hand.svg\"}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n            />\r\n            {\" ASC Poker\"}\r\n          </Navbar.Brand>\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link as={Link} to={\"/\"}>\r\n              Jogar\r\n            </Nav.Link>\r\n            <Nav.Link as={Link} to={\"/ranking\"}>\r\n              Ranking\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar>\r\n        <Route path={\"/\"} exact component={Board} />\r\n        <Route path={\"/ranking\"} exact component={Ranking} />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Menu from \"./Menu\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <>\n        <Menu />\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}