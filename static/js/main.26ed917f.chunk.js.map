{"version":3,"sources":["PokerCard.js","Hand.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["PokerCard","cardName","this","props","alt","style","width","margin","src","Component","Hand","hand","display","cards","map","card","value","suit","Poker","suitName","players","matchData","player","className","name","winner","evaluate","hand_name","getCardName","high_card","getSuitName","App","state","fetch","then","res","json","setState","loadHands","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAEqBA,G,uLACT,IACAC,EAAaC,KAAKC,MAAlBF,SACR,OACE,6BACE,yBACEG,IAAKH,EACLI,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAC7BC,IAAG,kBAAaP,EAAb,e,GAR0BQ,cCClBC,E,iLACT,IACAC,EAAST,KAAKC,MAAdQ,KACR,OACE,yBAAKN,MAAO,CAAEO,QAAS,SACpBD,GACCA,EAAKE,MAAMC,IAAI,SAAAC,GAAI,OACjB,kBAAC,EAAD,CAAWd,SAAQ,UAAKc,EAAKC,OAAV,OAAkBD,EAAKE,e,GAPpBR,a,iCCEbS,E,oLACPD,GACV,IAAIE,EAAW,GACf,OAAQF,GACN,IAAK,IACHE,EAAW,QACX,MACF,IAAK,IACHA,EAAW,QACX,MACF,IAAK,IACHA,EAAW,UACX,MACF,IAAK,IACHA,EAAW,OACX,MACF,QACEA,EAAWF,EAEf,OAAOE,I,kCAGGH,GACV,IAAIf,EAEJ,OAAQe,GACN,IAAK,IACHf,EAAW,SACX,MACF,IAAK,IACHA,EAAW,SACX,MACF,IAAK,IACHA,EAAW,MACX,MACF,IAAK,IACHA,EAAW,QACX,MACF,QACEA,EAAWe,EAGf,OAAOf,I,+BAGC,IAAD,OAECmB,EADclB,KAAKC,MAAnBkB,UACAD,QACR,OACE,kBAAC,IAAD,KACGA,GACCA,EAAQN,IAAI,SAAAQ,GAAM,OAChB,yBAAKjB,MAAO,CAAEE,OAAQ,KACpB,kBAAC,IAAD,CAAKgB,UAAU,6BACb,4BACGD,EAAOE,MACW,IAAlBF,EAAOG,OAAP,gBAAiC,OAGtC,kBAAC,IAAD,CAAKF,UAAU,6BACb,4BACGD,EAAOI,SAASC,UACfL,EAAOI,SAASC,UAEhB,+CACmB,IADnB,UAEM,EAAKC,YAAYN,EAAOI,SAASG,UAAUb,OAFjD,wCAGM,EAAKc,YAAYR,EAAOI,SAASG,UAAUZ,UAKvD,kBAAC,IAAD,CAAKM,UAAU,6BACZD,EAAOX,MAAQ,kBAAC,EAAD,CAAMA,KAAMW,EAAOX,gB,GAzEhBF,aCDdsB,E,YACnB,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KACD6B,MAAQ,CAAEX,UAAW,IAFT,E,yEAKN,IAAD,OACVY,MAAM,wCACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAI,EAAKE,SAAS,CAAEhB,UAAWc,Q,0CAI1CjC,KAAKoC,c,+BAIL,OAAO,kBAAC,EAAD,CAAOjB,UAAWnB,KAAK8B,MAAMX,gB,GAjBPZ,aCQb8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.26ed917f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class PokerCard extends Component {\r\n  render() {\r\n    const { cardName } = this.props;\r\n    return (\r\n      <div>\r\n        <img\r\n          alt={cardName}\r\n          style={{ width: 100, margin: 15 }}\r\n          src={`./cards/${cardName}.svg`}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PokerCard from \"./PokerCard\";\r\n\r\nexport default class Hand extends Component {\r\n  render() {\r\n    const { hand } = this.props;\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        {hand &&\r\n          hand.cards.map(card => (\r\n            <PokerCard cardName={`${card.value}${card.suit}`} />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Hand from \"./Hand\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nexport default class Poker extends Component {\r\n  getSuitName(suit) {\r\n    let suitName = \"\";\r\n    switch (suit) {\r\n      case \"O\":\r\n        suitName = \"Ouros\";\r\n        break;\r\n      case \"C\":\r\n        suitName = \"Copas\";\r\n        break;\r\n      case \"E\":\r\n        suitName = \"Espadas\";\r\n        break;\r\n      case \"P\":\r\n        suitName = \"Paus\";\r\n        break;\r\n      default:\r\n        suitName = suit;\r\n    }\r\n    return suitName;\r\n  }\r\n\r\n  getCardName(value) {\r\n    let cardName;\r\n\r\n    switch (value) {\r\n      case \"J\":\r\n        cardName = \"Valete\";\r\n        break;\r\n      case \"Q\":\r\n        cardName = \"Rainha\";\r\n        break;\r\n      case \"K\":\r\n        cardName = \"Rei\";\r\n        break;\r\n      case \"A\":\r\n        cardName = \"√Ås\";\r\n        break;\r\n      default:\r\n        cardName = value;\r\n    }\r\n\r\n    return cardName;\r\n  }\r\n\r\n  render() {\r\n    const { matchData } = this.props;\r\n    const { players } = matchData;\r\n    return (\r\n      <Container>\r\n        {players &&\r\n          players.map(player => (\r\n            <div style={{ margin: 50 }}>\r\n              <Row className=\"justify-content-md-center\">\r\n                <h1>\r\n                  {player.name}\r\n                  {player.winner === true ? ` üëë` : null}\r\n                </h1>\r\n              </Row>\r\n              <Row className=\"justify-content-md-center\">\r\n                <h1>\r\n                  {player.evaluate.hand_name ? (\r\n                    player.evaluate.hand_name\r\n                  ) : (\r\n                    <h1>\r\n                      Carta mais alta:{\" \"}\r\n                      {`${this.getCardName(player.evaluate.high_card.value)} de\r\n                        ${this.getSuitName(player.evaluate.high_card.suit)}`}\r\n                    </h1>\r\n                  )}\r\n                </h1>\r\n              </Row>\r\n              <Row className=\"justify-content-md-center\">\r\n                {player.hand && <Hand hand={player.hand} />}\r\n              </Row>\r\n            </div>\r\n          ))}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { matchData: {} };\n  }\n\n  loadHands() {\n    fetch(`https://desafio-php-asc.appspot.com/`)\n      .then(res => res.json())\n      .then(res => this.setState({ matchData: res }));\n  }\n\n  componentDidMount() {\n    this.loadHands();\n  }\n\n  render() {\n    return <Board matchData={this.state.matchData} />;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}